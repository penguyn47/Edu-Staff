generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StudentSex {
  MALE
  FEMALE
}

enum IdentificationType {
  CMND
  CCCD
  PASSPORT
}

enum EnrollmentStatus {
  ACTIVE
  CANCLED
  FINISHED
}

model Student {
  id          Int        @id @default(autoincrement())
  studentId   String     @unique
  name        String
  dob         DateTime
  sex         StudentSex
  cohort      Int
  phone       String?    @unique
  email       String?    @unique
  zipCode     Int
  nationality String

  statusId  Int
  facultyId Int
  programId Int

  permaAddressId Int?
  tempAddressId  Int?

  status       StudentStatus @relation(fields: [statusId], references: [id])
  faculty      Faculty       @relation(fields: [facultyId], references: [id])
  program      Program       @relation(fields: [programId], references: [id])
  permaAddress Address?      @relation("PermanentAddress", fields: [permaAddressId], references: [id])
  tempAddress  Address?      @relation("TemporaryAddress", fields: [tempAddressId], references: [id])

  cccdId     Int? @unique
  cmndId     Int? @unique
  passportId Int? @unique

  cccd       Identification? @relation("CCCD", fields: [cccdId], references: [id])
  cmnd       Identification? @relation("CMND", fields: [cmndId], references: [id])
  passport   Identification? @relation("PASSPORT", fields: [passportId], references: [id])
  Enrollment Enrollment[]
}

model Faculty {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  students Student[]
  Course   Course[]
}

model Program {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  students Student[]
}

model StudentStatus {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  students Student[]
}

model Address {
  id           Int       @id @default(autoincrement())
  houseNumber  String
  street       String
  ward         String
  district     String
  city         String
  country      String
  studentPerma Student[] @relation("PermanentAddress")
  studentTemp  Student[] @relation("TemporaryAddress")
}

model Identification {
  id              Int                @id @default(autoincrement())
  type            IdentificationType
  number          String
  issueDate       DateTime
  expiryDate      DateTime?
  issuePlace      String
  hasChip         Boolean?
  issuingCountry  String?
  notes           String?
  studentCCCD     Student?           @relation("CCCD")
  studentCMND     Student?           @relation("CMND")
  studentPASSPORT Student?           @relation("PASSPORT")
}

model Teacher {
  id        Int     @id @default(autoincrement())
  teacherId String  @unique
  name      String
  Class     Class[]
}

model Course {
  id          Int     @id @default(autoincrement())
  courseId    String  @unique
  name        String
  credits     Int
  facultyId   Int
  preCourseId Int?
  description String
  isDeactived Boolean @default(false)

  createdAt DateTime @default(now())

  preCourse Course? @relation("preCourse", fields: [preCourseId], references: [id])

  faculty Faculty @relation(fields: [facultyId], references: [id])

  Course Course[] @relation("preCourse")
  Class  Class[]
}

model Class {
  id      Int    @id @default(autoincrement())
  classId String @unique

  year     Int
  semester Int

  maxStudent Int
  room       String
  schedule   String

  courseId  Int
  teacherId Int

  course     Course       @relation(fields: [courseId], references: [id])
  teacher    Teacher      @relation(fields: [teacherId], references: [id])
  Enrollment Enrollment[]
}

model Enrollment {
  id Int @id @default(autoincrement())

  studentId Int
  classId   Int

  status EnrollmentStatus

  student Student @relation(fields: [studentId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])
}

model Result {
  id Int @id @default(autoincrement())

  studentId Int
  courseId  Int

  credits Int
  grade   Float
}
